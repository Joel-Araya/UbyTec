{"version":3,"file":"number_pipe.d.ts","sources":["number_pipe.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { PipeTransform } from '@angular/core';\r\n/**\r\n * @ngModule CommonModule\r\n * @description\r\n *\r\n * Transforms a number into a string,\r\n * formatted according to locale rules that determine group sizing and\r\n * separator, decimal-point character, and other locale-specific\r\n * configurations.\r\n *\r\n * If no parameters are specified, the function rounds off to the nearest value using this\r\n * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).\r\n * The behavior differs from that of the JavaScript ```Math.round()``` function.\r\n * In the following case for example, the pipe rounds down where\r\n * ```Math.round()``` rounds up:\r\n *\r\n * ```html\r\n * -2.5 | number:'1.0-0'\r\n * > -3\r\n * Math.round(-2.5)\r\n * > -2\r\n * ```\r\n *\r\n * @see `formatNumber()`\r\n *\r\n * @usageNotes\r\n * The following code shows how the pipe transforms numbers\r\n * into text strings, according to various format specifications,\r\n * where the caller's default locale is `en-US`.\r\n *\r\n * ### Example\r\n *\r\n * <code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\r\n *\r\n * @publicApi\r\n */\r\nexport declare class DecimalPipe implements PipeTransform {\r\n    private _locale;\r\n    constructor(_locale: string);\r\n    /**\r\n     * @param value The number to be formatted.\r\n     * @param digitsInfo Decimal representation options, specified by a string\r\n     * in the following format:<br>\r\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\r\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\r\n     * Default is `1`.\r\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\r\n     * Default is `0`.\r\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\r\n     * Default is `3`.\r\n     * @param locale A locale code for the locale format rules to use.\r\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\r\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\r\n     */\r\n    transform(value: any, digitsInfo?: string, locale?: string): string | null;\r\n}\r\n/**\r\n * @ngModule CommonModule\r\n * @description\r\n *\r\n * Transforms a number to a percentage\r\n * string, formatted according to locale rules that determine group sizing and\r\n * separator, decimal-point character, and other locale-specific\r\n * configurations.\r\n *\r\n * @see `formatPercent()`\r\n *\r\n * @usageNotes\r\n * The following code shows how the pipe transforms numbers\r\n * into text strings, according to various format specifications,\r\n * where the caller's default locale is `en-US`.\r\n *\r\n * <code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\r\n *\r\n * @publicApi\r\n */\r\nexport declare class PercentPipe implements PipeTransform {\r\n    private _locale;\r\n    constructor(_locale: string);\r\n    /**\r\n     *\r\n     * @param value The number to be formatted as a percentage.\r\n     * @param digitsInfo Decimal representation options, specified by a string\r\n     * in the following format:<br>\r\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\r\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\r\n     * Default is `1`.\r\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\r\n     * Default is `0`.\r\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\r\n     * Default is `0`.\r\n     * @param locale A locale code for the locale format rules to use.\r\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\r\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\r\n     */\r\n    transform(value: any, digitsInfo?: string, locale?: string): string | null;\r\n}\r\n/**\r\n * @ngModule CommonModule\r\n * @description\r\n *\r\n * Transforms a number to a currency string, formatted according to locale rules\r\n * that determine group sizing and separator, decimal-point character,\r\n * and other locale-specific configurations.\r\n *\r\n * @see `getCurrencySymbol()`\r\n * @see `formatCurrency()`\r\n *\r\n * @usageNotes\r\n * The following code shows how the pipe transforms numbers\r\n * into text strings, according to various format specifications,\r\n * where the caller's default locale is `en-US`.\r\n *\r\n * <code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\r\n *\r\n * @publicApi\r\n */\r\nexport declare class CurrencyPipe implements PipeTransform {\r\n    private _locale;\r\n    constructor(_locale: string);\r\n    /**\r\n     *\r\n     * @param value The number to be formatted as currency.\r\n     * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\r\n     * such as `USD` for the US dollar and `EUR` for the euro.\r\n     * @param display The format for the currency indicator. One of the following:\r\n     *   - `code`: Show the code (such as `USD`).\r\n     *   - `symbol`(default): Show the symbol (such as `$`).\r\n     *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\r\n     * currency.\r\n     * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\r\n     * locale has no narrow symbol, uses the standard symbol for the locale.\r\n     *   - String: Use the given string value instead of a code or a symbol.\r\n     * For example, an empty string will suppress the currency & symbol.\r\n     *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\r\n     *\r\n     * @param digitsInfo Decimal representation options, specified by a string\r\n     * in the following format:<br>\r\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\r\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\r\n     * Default is `1`.\r\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\r\n     * Default is `2`.\r\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\r\n     * Default is `2`.\r\n     * If not provided, the number will be formatted with the proper amount of digits,\r\n     * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\r\n     * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\r\n     * @param locale A locale code for the locale format rules to use.\r\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\r\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\r\n     */\r\n    transform(value: any, currencyCode?: string, display?: 'code' | 'symbol' | 'symbol-narrow' | string | boolean, digitsInfo?: string, locale?: string): string | null;\r\n}\r\n"]}