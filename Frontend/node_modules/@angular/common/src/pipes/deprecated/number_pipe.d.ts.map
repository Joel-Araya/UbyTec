{"version":3,"file":"number_pipe.d.ts","sources":["number_pipe.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { PipeTransform } from '@angular/core';\r\n/**\r\n * Formats a number as text. Group sizing and separator and other locale-specific\r\n * configurations are based on the active locale.\r\n *\r\n * where `expression` is a number:\r\n *  - `digitInfo` is a `string` which has a following format: <br>\r\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\r\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\r\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\r\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\r\n *\r\n * For more information on the acceptable range for each of these numbers and other\r\n * details see your native internationalization library.\r\n *\r\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\r\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Example\r\n *\r\n * {@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\r\n *\r\n * @ngModule CommonModule\r\n * @publicApi\r\n */\r\nexport declare class DeprecatedDecimalPipe implements PipeTransform {\r\n    private _locale;\r\n    constructor(_locale: string);\r\n    transform(value: any, digits?: string): string | null;\r\n}\r\n/**\r\n * @ngModule CommonModule\r\n *\r\n * @description\r\n *\r\n * Formats a number as percentage according to locale rules.\r\n *\r\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\r\n *\r\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\r\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Example\r\n *\r\n * {@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\r\n *\r\n * @publicApi\r\n */\r\nexport declare class DeprecatedPercentPipe implements PipeTransform {\r\n    private _locale;\r\n    constructor(_locale: string);\r\n    transform(value: any, digits?: string): string | null;\r\n}\r\n/**\r\n * @ngModule CommonModule\r\n * @description\r\n *\r\n * Formats a number as currency using locale rules.\r\n *\r\n * Use `currency` to format a number as currency.\r\n *\r\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\r\n *    as `USD` for the US dollar and `EUR` for the euro.\r\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\r\n *   - `true`: use symbol (e.g. `$`).\r\n *   - `false`(default): use code (e.g. `USD`).\r\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\r\n *\r\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\r\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Example\r\n *\r\n * {@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\r\n *\r\n * @publicApi\r\n */\r\nexport declare class DeprecatedCurrencyPipe implements PipeTransform {\r\n    private _locale;\r\n    constructor(_locale: string);\r\n    transform(value: any, currencyCode?: string, symbolDisplay?: boolean, digits?: string): string | null;\r\n}\r\n"]}