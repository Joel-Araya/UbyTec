{"version":3,"file":"slice_pipe.d.ts","sources":["slice_pipe.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { PipeTransform } from '@angular/core';\r\n/**\r\n * @ngModule CommonModule\r\n * @description\r\n *\r\n * Creates a new `Array` or `String` containing a subset (slice) of the elements.\r\n *\r\n * @usageNotes\r\n *\r\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\r\n * and `String.prototype.slice()`.\r\n *\r\n * When operating on an `Array`, the returned `Array` is always a copy even when all\r\n * the elements are being returned.\r\n *\r\n * When operating on a blank value, the pipe returns the blank value.\r\n *\r\n * ### List Example\r\n *\r\n * This `ngFor` example:\r\n *\r\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\r\n *\r\n * produces the following:\r\n *\r\n * ```html\r\n * <li>b</li>\r\n * <li>c</li>\r\n * ```\r\n *\r\n * ### String Examples\r\n *\r\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\r\n *\r\n * @publicApi\r\n */\r\nexport declare class SlicePipe implements PipeTransform {\r\n    /**\r\n     * @param value a list or a string to be sliced.\r\n     * @param start the starting index of the subset to return:\r\n     *   - **a positive integer**: return the item at `start` index and all items after\r\n     *     in the list or string expression.\r\n     *   - **a negative integer**: return the item at `start` index from the end and all items after\r\n     *     in the list or string expression.\r\n     *   - **if positive and greater than the size of the expression**: return an empty list or\r\n     * string.\r\n     *   - **if negative and greater than the size of the expression**: return entire list or string.\r\n     * @param end the ending index of the subset to return:\r\n     *   - **omitted**: return all items until the end.\r\n     *   - **if positive**: return all items before `end` index of the list or string.\r\n     *   - **if negative**: return all items before `end` index from the end of the list or string.\r\n     */\r\n    transform(value: any, start: number, end?: number): any;\r\n    private supports;\r\n}\r\n"]}