{"version":3,"file":"keyvalue_pipe.d.ts","sources":["keyvalue_pipe.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { KeyValueDiffers, PipeTransform } from '@angular/core';\r\n/**\r\n * A key value pair.\r\n * Usually used to represent the key value pairs from a Map or Object.\r\n *\r\n * @publicApi\r\n */\r\nexport interface KeyValue<K, V> {\r\n    key: K;\r\n    value: V;\r\n}\r\n/**\r\n * @ngModule CommonModule\r\n * @description\r\n *\r\n * Transforms Object or Map into an array of key value pairs.\r\n *\r\n * The output array will be ordered by keys.\r\n * By default the comparator will be by Unicode point value.\r\n * You can optionally pass a compareFn if your keys are complex types.\r\n *\r\n * @usageNotes\r\n * ### Examples\r\n *\r\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue\r\n * pipe.\r\n *\r\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\r\n *\r\n * @publicApi\r\n */\r\nexport declare class KeyValuePipe implements PipeTransform {\r\n    private readonly differs;\r\n    constructor(differs: KeyValueDiffers);\r\n    private differ;\r\n    private keyValues;\r\n    transform<K, V>(input: null, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): null;\r\n    transform<V>(input: {\r\n        [key: string]: V;\r\n    } | Map<string, V>, compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number): Array<KeyValue<string, V>>;\r\n    transform<V>(input: {\r\n        [key: number]: V;\r\n    } | Map<number, V>, compareFn?: (a: KeyValue<number, V>, b: KeyValue<number, V>) => number): Array<KeyValue<number, V>>;\r\n    transform<K, V>(input: Map<K, V>, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): Array<KeyValue<K, V>>;\r\n}\r\nexport declare function defaultComparator<K, V>(keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number;\r\n"]}