{"version":3,"file":"ng_template_outlet.d.ts","sources":["ng_template_outlet.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { OnChanges, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\n/**\r\n * @ngModule CommonModule\r\n *\r\n * @description\r\n *\r\n * Inserts an embedded view from a prepared `TemplateRef`.\r\n *\r\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\r\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\r\n * by the local template `let` declarations.\r\n *\r\n * @usageNotes\r\n * ```\r\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\r\n * ```\r\n *\r\n * Using the key `$implicit` in the context object will set its value as default.\r\n *\r\n * ### Example\r\n *\r\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\r\n *\r\n * @publicApi\r\n */\r\nexport declare class NgTemplateOutlet implements OnChanges {\r\n    private _viewContainerRef;\r\n    private _viewRef;\r\n    ngTemplateOutletContext: Object;\r\n    ngTemplateOutlet: TemplateRef<any>;\r\n    constructor(_viewContainerRef: ViewContainerRef);\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n     * We need to re-create existing embedded view if:\r\n     * - templateRef has changed\r\n     * - context has changes\r\n     *\r\n     * We mark context object as changed when the corresponding object\r\n     * shape changes (new properties are added or existing properties are removed).\r\n     * In other words we consider context with the same properties as \"the same\" even\r\n     * if object reference changes (see https://github.com/angular/angular/issues/13407).\r\n     */\r\n    private _shouldRecreateView;\r\n    private _hasContextShapeChanged;\r\n    private _updateExistingContext;\r\n}\r\n"]}