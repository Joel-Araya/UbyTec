{"version":3,"file":"ng_if.d.ts","sources":["ng_if.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { TemplateRef, ViewContainerRef } from '@angular/core';\r\n/**\r\n * A structural directive that conditionally includes a template based on the value of\r\n * an expression coerced to Boolean.\r\n * When the expression evaluates to true, Angular renders the template\r\n * provided in a `then` clause, and when  false or null,\r\n * Angular renders the template provided in an optional `else` clause. The default\r\n * template for the `else` clause is blank.\r\n *\r\n * A [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,\r\n * `*ngIf=\"condition\"`, is generally used, provided\r\n * as an attribute of the anchor element for the inserted template.\r\n * Angular expands this into a more explicit version, in which the anchor element\r\n * is contained in an `<ng-template>` element.\r\n *\r\n * Simple form with shorthand syntax:\r\n *\r\n * ```\r\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\r\n * ```\r\n *\r\n * Simple form with expanded syntax:\r\n *\r\n * ```\r\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\r\n * true.</div></ng-template>\r\n * ```\r\n *\r\n * Form with an \"else\" block:\r\n *\r\n * ```\r\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\r\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\r\n * ```\r\n *\r\n * Shorthand form with \"then\" and \"else\" blocks:\r\n *\r\n * ```\r\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\r\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\r\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\r\n * ```\r\n *\r\n * Form with storing the value locally:\r\n *\r\n * ```\r\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\r\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\r\n * ```\r\n *\r\n * @usageNotes\r\n *\r\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\r\n * as seen in the following  example.\r\n * The default `else` template is blank.\r\n *\r\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\r\n *\r\n * ### Showing an alternative template using `else`\r\n *\r\n * To display a template when `expression` evaluates to false, use an `else` template\r\n * binding as shown in the following example.\r\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\r\n * The template can be defined anywhere in the component view, but is typically placed right after\r\n * `ngIf` for readability.\r\n *\r\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\r\n *\r\n * ### Using an external `then` template\r\n *\r\n * In the previous example, the then-clause template is specified inline, as the content of the\r\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\r\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\r\n * change which template to use at runtime, as shown in the following example.\r\n *\r\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\r\n *\r\n * ### Storing a conditional result in a variable\r\n *\r\n * You might want to show a set of properties from the same object. If you are waiting\r\n * for asynchronous data, the object can be undefined.\r\n * In this case, you can use `ngIf` and store the result of the condition in a local\r\n * variable as shown in the the following example.\r\n *\r\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\r\n *\r\n * This code uses only one `AsyncPipe`, so only one subscription is created.\r\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\r\n * You can then bind the local `user` repeatedly.\r\n *\r\n * The conditional displays the data only if `userStream` returns a value,\r\n * so you don't need to use the\r\n * [safe-navigation-operator](guide/template-syntax#safe-navigation-operator) (`?.`)\r\n * to guard against null values when accessing properties.\r\n * You can display an alternative template while waiting for the data.\r\n *\r\n * ### Shorthand syntax\r\n *\r\n * The shorthand syntax `*ngIf` expands into two separate template specifications\r\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\r\n * that is meant to show a loading page while waiting for data to be loaded.\r\n *\r\n * ```\r\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\r\n *  ...\r\n * </div>\r\n *\r\n * <ng-template #loading>\r\n *  <div>Loading...</div>\r\n * </ng-template>\r\n * ```\r\n *\r\n * You can see that the \"else\" clause references the `<ng-template>`\r\n * with the `#loading` label, and the template for the \"then\" clause\r\n * is provided as the content of the anchor element.\r\n *\r\n * However, when Angular expands the shorthand syntax, it creates\r\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\r\n * The anchor element containing the template for the \"then\" clause becomes\r\n * the content of this unlabeled `<ng-template>` tag.\r\n *\r\n * ```\r\n * <ng-template [ngIf]=\"hero-list\" [ngIfElse]=\"loading\">\r\n *  <div class=\"hero-list\">\r\n *   ...\r\n *  </div>\r\n * </ng-template>\r\n *\r\n * <ng-template #loading>\r\n *  <div>Loading...</div>\r\n * </ng-template>\r\n * ```\r\n *\r\n * The presence of the implicit template object has implications for the nesting of\r\n * structural directives. For more on this subject, see\r\n * [Structural Directives](https://angular.io/guide/structural-directives#one-per-element).\r\n *\r\n * @ngModule CommonModule\r\n * @publicApi\r\n */\r\nexport declare class NgIf {\r\n    private _viewContainer;\r\n    private _context;\r\n    private _thenTemplateRef;\r\n    private _elseTemplateRef;\r\n    private _thenViewRef;\r\n    private _elseViewRef;\r\n    constructor(_viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>);\r\n    ngIf: any;\r\n    ngIfThen: TemplateRef<NgIfContext> | null;\r\n    ngIfElse: TemplateRef<NgIfContext> | null;\r\n    private _updateView;\r\n    /**\r\n     * Assert the correct type of the expression bound to the `ngIf` input within the template.\r\n     *\r\n     * The presence of this method is a signal to the Ivy template type check compiler that when the\r\n     * `NgIf` structural directive renders its template, the type of the expression bound to `ngIf`\r\n     * should be narrowed in some way. For `NgIf`, it is narrowed to be non-null, which allows the\r\n     * strictNullChecks feature of TypeScript to work with `NgIf`.\r\n     */\r\n    static ngTemplateGuard_ngIf<E>(dir: NgIf, expr: E): expr is NonNullable<E>;\r\n}\r\n/**\r\n * @publicApi\r\n */\r\nexport declare class NgIfContext {\r\n    $implicit: any;\r\n    ngIf: any;\r\n}\r\n"]}