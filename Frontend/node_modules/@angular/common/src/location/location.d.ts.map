{"version":3,"file":"location.d.ts","sources":["location.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { SubscriptionLike } from 'rxjs';\r\nimport { LocationStrategy } from './location_strategy';\r\n/** @publicApi */\r\nexport interface PopStateEvent {\r\n    pop?: boolean;\r\n    state?: any;\r\n    type?: string;\r\n    url?: string;\r\n}\r\n/**\r\n * @description\r\n *\r\n * A service that applications can use to interact with a browser's URL.\r\n *\r\n * Depending on the {@link LocationStrategy} used, `Location` will either persist\r\n * to the URL's path or the URL's hash segment.\r\n *\r\n * @usageNotes\r\n *\r\n * It's better to use the {@link Router#navigate} service to trigger route changes. Use\r\n * `Location` only if you need to interact with or create normalized URLs outside of\r\n * routing.\r\n *\r\n * `Location` is responsible for normalizing the URL against the application's base href.\r\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\r\n * trailing slash:\r\n * - `/my/app/user/123` is normalized\r\n * - `my/app/user/123` **is not** normalized\r\n * - `/my/app/user/123/` **is not** normalized\r\n *\r\n * ### Example\r\n *\r\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\r\n *\r\n * @publicApi\r\n */\r\nexport declare class Location {\r\n    constructor(platformStrategy: LocationStrategy);\r\n    /**\r\n     * Returns the normalized URL path.\r\n     *\r\n     * @param includeHash Whether path has an anchor fragment.\r\n     *\r\n     * @returns The normalized URL path.\r\n     */\r\n    path(includeHash?: boolean): string;\r\n    /**\r\n     * Normalizes the given path and compares to the current normalized path.\r\n     *\r\n     * @param path The given URL path\r\n     * @param query Query parameters\r\n     *\r\n     * @returns `true` if the given URL path is equal to the current normalized path, `false`\r\n     * otherwise.\r\n     */\r\n    isCurrentPathEqualTo(path: string, query?: string): boolean;\r\n    /**\r\n     * Given a string representing a URL, returns the URL path after stripping the\r\n     * trailing slashes.\r\n     *\r\n     * @param url String representing a URL.\r\n     *\r\n     * @returns Normalized URL string.\r\n     */\r\n    normalize(url: string): string;\r\n    /**\r\n     * Given a string representing a URL, returns the platform-specific external URL path.\r\n     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\r\n     * before normalizing. This method also adds a hash if `HashLocationStrategy` is\r\n     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\r\n     *\r\n     *\r\n     * @param url String representing a URL.\r\n     *\r\n     * @returns  A normalized platform-specific URL.\r\n     */\r\n    prepareExternalUrl(url: string): string;\r\n    /**\r\n     * Changes the browsers URL to a normalized version of the given URL, and pushes a\r\n     * new item onto the platform's history.\r\n     *\r\n     * @param path  URL path to normalizze\r\n     * @param query Query parameters\r\n     * @param state Location history state\r\n     *\r\n     */\r\n    go(path: string, query?: string, state?: any): void;\r\n    /**\r\n     * Changes the browser's URL to a normalized version of the given URL, and replaces\r\n     * the top item on the platform's history stack.\r\n     *\r\n     * @param path  URL path to normalizze\r\n     * @param query Query parameters\r\n     * @param state Location history state\r\n     */\r\n    replaceState(path: string, query?: string, state?: any): void;\r\n    /**\r\n     * Navigates forward in the platform's history.\r\n     */\r\n    forward(): void;\r\n    /**\r\n     * Navigates back in the platform's history.\r\n     */\r\n    back(): void;\r\n    /**\r\n     * Subscribe to the platform's `popState` events.\r\n     *\r\n     * @param value Event that is triggered when the state history changes.\r\n     * @param exception The exception to throw.\r\n     *\r\n     * @returns Subscribed events.\r\n     */\r\n    subscribe(onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void) | null, onReturn?: (() => void) | null): SubscriptionLike;\r\n    /**\r\n     * Given a string of url parameters, prepend with `?` if needed, otherwise return the\r\n     * parameters as is.\r\n     *\r\n     *  @param  params String of URL parameters\r\n     *\r\n     *  @returns URL parameters prepended with `?` or the parameters as is.\r\n     */\r\n    static normalizeQueryParams(params: string): string;\r\n    /**\r\n     * Given 2 parts of a URL, join them with a slash if needed.\r\n     *\r\n     * @param start  URL string\r\n     * @param end    URL string\r\n     *\r\n     *\r\n     * @returns Given URL strings joined with a slash, if needed.\r\n     */\r\n    static joinWithSlash(start: string, end: string): string;\r\n    /**\r\n     * If URL has a trailing slash, remove it, otherwise return the URL as is. The\r\n     * method looks for the first occurrence of either `#`, `?`, or the end of the\r\n     * line as `/` characters and removes the trailing slash if one exists.\r\n     *\r\n     * @param url URL string\r\n     *\r\n     * @returns Returns a URL string after removing the trailing slash if one exists, otherwise\r\n     * returns the string as is.\r\n     */\r\n    static stripTrailingSlash(url: string): string;\r\n}\r\n"]}