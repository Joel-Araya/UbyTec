{"version":3,"file":"path_location_strategy.d.ts","sources":["path_location_strategy.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { LocationStrategy } from './location_strategy';\r\nimport { LocationChangeListener, PlatformLocation } from './platform_location';\r\n/**\r\n * @description\r\n * A {@link LocationStrategy} used to configure the {@link Location} service to\r\n * represent its state in the\r\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\r\n * browser's URL.\r\n *\r\n * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}\r\n * or add a base element to the document. This URL prefix that will be preserved\r\n * when generating and recognizing URLs.\r\n *\r\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\r\n * `location.go('/foo')`, the browser's URL will become\r\n * `example.com/my/app/foo`.\r\n *\r\n * Similarly, if you add `<base href='/my/app'/>` to the document and call\r\n * `location.go('/foo')`, the browser's URL will become\r\n * `example.com/my/app/foo`.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Example\r\n *\r\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\r\n *\r\n * @publicApi\r\n */\r\nexport declare class PathLocationStrategy extends LocationStrategy {\r\n    private _platformLocation;\r\n    private _baseHref;\r\n    constructor(_platformLocation: PlatformLocation, href?: string);\r\n    onPopState(fn: LocationChangeListener): void;\r\n    getBaseHref(): string;\r\n    prepareExternalUrl(internal: string): string;\r\n    path(includeHash?: boolean): string;\r\n    pushState(state: any, title: string, url: string, queryParams: string): void;\r\n    replaceState(state: any, title: string, url: string, queryParams: string): void;\r\n    forward(): void;\r\n    back(): void;\r\n}\r\n"]}