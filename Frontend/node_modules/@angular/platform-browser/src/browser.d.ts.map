{"version":3,"file":"browser.d.ts","sources":["browser.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ErrorHandler, ModuleWithProviders, PlatformRef, StaticProvider } from '@angular/core';\r\nexport declare const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[];\r\n/**\r\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\r\n * Attacker-controlled data introduced by an unsanitized provider could expose your\r\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\r\n * @publicApi\r\n */\r\nexport declare const BROWSER_SANITIZATION_PROVIDERS: StaticProvider[];\r\n/**\r\n * @publicApi\r\n */\r\nexport declare const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef;\r\nexport declare function initDomAdapter(): void;\r\nexport declare function errorHandler(): ErrorHandler;\r\nexport declare function _document(): any;\r\nexport declare const BROWSER_MODULE_PROVIDERS: StaticProvider[];\r\n/**\r\n * Exports required infrastructure for all Angular apps.\r\n * Included by default in all Angular apps created with the CLI\r\n * `new` command.\r\n * Re-exports `CommonModule` and `ApplicationModule`, making their\r\n * exports and providers available to all apps.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class BrowserModule {\r\n    constructor(parentModule: BrowserModule | null);\r\n    /**\r\n     * Configures a browser-based app to transition from a server-rendered app, if\r\n     * one is present on the page.\r\n     *\r\n     * @param params An object containing an identifier for the app to transition.\r\n     * The ID must match between the client and server versions of the app.\r\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\r\n     */\r\n    static withServerTransition(params: {\r\n        appId: string;\r\n    }): ModuleWithProviders<BrowserModule>;\r\n}\r\n"]}