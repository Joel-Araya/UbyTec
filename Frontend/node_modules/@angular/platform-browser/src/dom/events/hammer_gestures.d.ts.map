{"version":3,"file":"hammer_gestures.d.ts","sources":["hammer_gestures.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { InjectionToken, ÉµConsole as Console } from '@angular/core';\r\nimport { EventManagerPlugin } from './event_manager';\r\n/**\r\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\r\n * @see `HammerGestureConfig`\r\n *\r\n * @publicApi\r\n */\r\nexport declare const HAMMER_GESTURE_CONFIG: InjectionToken<HammerGestureConfig>;\r\n/**\r\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\r\n *\r\n * @publicApi\r\n */\r\nexport declare type HammerLoader = () => Promise<void>;\r\n/**\r\n * Injection token used to provide a {@link HammerLoader} to Angular.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const HAMMER_LOADER: InjectionToken<HammerLoader>;\r\nexport interface HammerInstance {\r\n    on(eventName: string, callback?: Function): void;\r\n    off(eventName: string, callback?: Function): void;\r\n    destroy?(): void;\r\n}\r\n/**\r\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\r\n * for gesture recognition. Configures specific event recognition.\r\n * @publicApi\r\n */\r\nexport declare class HammerGestureConfig {\r\n    /**\r\n     * A set of supported event names for gestures to be used in Angular.\r\n     * Angular supports all built-in recognizers, as listed in\r\n     * [HammerJS documentation](http://hammerjs.github.io/).\r\n     */\r\n    events: string[];\r\n    /**\r\n    * Maps gesture event names to a set of configuration options\r\n    * that specify overrides to the default values for specific properties.\r\n    *\r\n    * The key is a supported event name to be configured,\r\n    * and the options object contains a set of properties, with override values\r\n    * to be applied to the named recognizer event.\r\n    * For example, to disable recognition of the rotate event, specify\r\n    *  `{\"rotate\": {\"enable\": false}}`.\r\n    *\r\n    * Properties that are not present take the HammerJS default values.\r\n    * For information about which properties are supported for which events,\r\n    * and their allowed and default values, see\r\n    * [HammerJS documentation](http://hammerjs.github.io/).\r\n    *\r\n    */\r\n    overrides: {\r\n        [key: string]: Object;\r\n    };\r\n    /**\r\n     * Properties whose default values can be overridden for a given event.\r\n     * Different sets of properties apply to different events.\r\n     * For information about which properties are supported for which events,\r\n     * and their allowed and default values, see\r\n     * [HammerJS documentation](http://hammerjs.github.io/).\r\n     */\r\n    options?: {\r\n        cssProps?: any;\r\n        domEvents?: boolean;\r\n        enable?: boolean | ((manager: any) => boolean);\r\n        preset?: any[];\r\n        touchAction?: string;\r\n        recognizers?: any[];\r\n        inputClass?: any;\r\n        inputTarget?: EventTarget;\r\n    };\r\n    /**\r\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\r\n     * and attaches it to a given HTML element.\r\n     * @param element The element that will recognize gestures.\r\n     * @returns A HammerJS event-manager object.\r\n     */\r\n    buildHammer(element: HTMLElement): HammerInstance;\r\n}\r\nexport declare class HammerGesturesPlugin extends EventManagerPlugin {\r\n    private _config;\r\n    private console;\r\n    private loader?;\r\n    constructor(doc: any, _config: HammerGestureConfig, console: Console, loader?: HammerLoader | null | undefined);\r\n    supports(eventName: string): boolean;\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    isCustomEvent(eventName: string): boolean;\r\n}\r\n"]}